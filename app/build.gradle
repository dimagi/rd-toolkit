    apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

ext {
    // Obtained from ~/.gradle/gradle.properties on build server (mobile agent), or your local
    // ~/.gradle/gradle.properties file, or loads default empty strings if neither is present
    RELEASE_STORE_FILE = project.properties['TOOLKIT_RELEASE_STORE_FILE'] ?: "."
    RELEASE_STORE_PASSWORD = project.properties['TOOLKIT_RELEASE_STORE_PASSWORD'] ?: ""
    RELEASE_KEY_ALIAS = project.properties['TOOLKIT_RELEASE_KEY_ALIAS'] ?: ""
    RELEASE_KEY_PASSWORD = project.properties['TOOLKIT_RELEASE_KEY_PASSWORD'] ?: ""
    buildAppName = 'rdtoolkit'
}

android {
    compileSdkVersion 33
    buildToolsVersion "30.0.1"

    flavorDimensions "licenses"

    productFlavors {
        open {
            dimension "licenses"
            getIsDefault().set(true)
        }

        restricted {
            dimension "licenses"
            loadRestrictedProperties()
        }
    }

    signingConfigs {
        release {
            storeFile file(project.ext.RELEASE_STORE_FILE)
            storePassword project.ext.RELEASE_STORE_PASSWORD
            keyAlias project.ext.RELEASE_KEY_ALIAS
            keyPassword project.ext.RELEASE_KEY_PASSWORD
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    bundle {
        language {
            enableSplit = false
        }
    }

    defaultConfig {
        applicationId "org.rdtoolkit"
        minSdkVersion 21
        targetSdkVersion 33
        versionCode Integer.valueOf(System.getenv("BUILD_NUMBER") ?: 1).intValue()
        versionName "0.9.11"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation":
                                      "$projectDir/schemas".toString()]
            }
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "${buildAppName}-${variant.flavorName}-${variant.buildType.name}-${defaultConfig.versionName}.apk"
        }
    }
    packagingOptions {
        pickFirst 'lib/arm64-v8a/libopencv_java4.so'
        pickFirst 'lib/arm64-v8a/libc++_shared.so'
        pickFirst 'lib/armeabi-v7a/libopencv_java4.so'
        pickFirst 'lib/armeabi-v7a/libc++_shared.so'
        pickFirst 'lib/x86/libc++_shared.so'
        pickFirst 'lib/x86_64/libc++_shared.so'
    }

    sourceSets {
        androidTest.assets.srcDirs += files("$projectDir/schemas".toString())
    }
}

dependencies {
    implementation project(':rd-toolkit-support')

    implementation 'androidx.room:room-runtime:2.2.6'
    implementation 'androidx.work:work-runtime:2.4.0'
    annotationProcessor 'androidx.room:room-compiler:2.2.6'
    kapt 'androidx.room:room-compiler:2.2.5'

    def nav_version = "2.3.1"
    def lifecycle_version = "2.2.0"
    def camerax_version = "1.0.0-rc04"

    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'com.google.android.material:material:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation "androidx.navigation:navigation-fragment:$nav_version"
    implementation "androidx.navigation:navigation-ui:$nav_version"
    implementation 'androidx.vectordrawable:vectordrawable:1.1.0'

    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-service:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"

    implementation 'androidx.preference:preference:1.1.1'

    // CameraX core library using camera2 implementation
    implementation "androidx.camera:camera-camera2:$camerax_version"
    // CameraX Lifecycle Library
    implementation "androidx.camera:camera-lifecycle:$camerax_version"
    // CameraX View class
    implementation "androidx.camera:camera-view:1.0.0-alpha18"


    implementation 'com.google.code.gson:gson:2.8.6'

    implementation "androidx.core:core-ktx:1.0.1"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    implementation("com.squareup.okhttp3:okhttp:4.9.0")

    implementation 'com.github.ctsims:ArcProgressBar:master-SNAPSHOT'
    implementation 'com.zeugmasolutions.localehelper:locale-helper-android:1.1.2'

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.json:json:20160212'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    androidTestImplementation "androidx.room:room-testing:2.2.6"

    // Feature module Support
    implementation "androidx.navigation:navigation-dynamic-features-fragment:$nav_version"

    // Testing Navigation
    androidTestImplementation "androidx.navigation:navigation-testing:$nav_version"

    if (project.hasProperty("restrictedLibraryRoot")) {
        restrictedImplementation files("$restrictedLibraryRoot/scanwell-rdt-reader.aar")
        restrictedImplementation files("$restrictedLibraryRoot/RDTLib-0.1-4-debug.aar")
    }
    restrictedImplementation 'com.quickbirdstudios:opencv:4.3.0'
}

def loadRestrictedProperties() {
    //Load a local properties file if one exists
    if (file("$project.rootDir/local.restricted.properties").exists()) {
        def localProperties = new Properties()
        localProperties.load(new FileInputStream("$project.rootDir/local.restricted.properties"))
        localProperties.each { prop -> project.ext.set(prop.key, prop.value) }
    }
}
